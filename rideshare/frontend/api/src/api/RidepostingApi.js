/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchedRidePosting from '../model/PatchedRidePosting';
import RidePosting from '../model/RidePosting';

/**
* Rideposting service.
* @module api/RidepostingApi
* @version 0.0.0
*/
export default class RidepostingApi {

    /**
    * Constructs a new RidepostingApi. 
    * @alias module:api/RidepostingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ridepostingCreate operation.
     * @callback module:api/RidepostingApi~ridepostingCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RidePosting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RidePosting} ridePosting 
     * @param {module:api/RidepostingApi~ridepostingCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RidePosting}
     */
    ridepostingCreate(ridePosting, callback) {
      let postBody = ridePosting;
      // verify the required parameter 'ridePosting' is set
      if (ridePosting === undefined || ridePosting === null) {
        throw new Error("Missing the required parameter 'ridePosting' when calling ridepostingCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = RidePosting;
      return this.apiClient.callApi(
        '/api/rideposting/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ridepostingDestroy operation.
     * @callback module:api/RidepostingApi~ridepostingDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} orderId A unique value identifying this ride posting.
     * @param {module:api/RidepostingApi~ridepostingDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ridepostingDestroy(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ridepostingDestroy");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rideposting/{order_id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ridepostingList operation.
     * @callback module:api/RidepostingApi~ridepostingListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RidePosting>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/RidepostingApi~ridepostingListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RidePosting>}
     */
    ridepostingList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RidePosting];
      return this.apiClient.callApi(
        '/api/rideposting/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ridepostingPartialUpdate operation.
     * @callback module:api/RidepostingApi~ridepostingPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RidePosting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} orderId A unique value identifying this ride posting.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedRidePosting} opts.patchedRidePosting 
     * @param {module:api/RidepostingApi~ridepostingPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RidePosting}
     */
    ridepostingPartialUpdate(orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedRidePosting'];
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ridepostingPartialUpdate");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = RidePosting;
      return this.apiClient.callApi(
        '/api/rideposting/{order_id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ridepostingRetrieve operation.
     * @callback module:api/RidepostingApi~ridepostingRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RidePosting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} orderId A unique value identifying this ride posting.
     * @param {module:api/RidepostingApi~ridepostingRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RidePosting}
     */
    ridepostingRetrieve(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ridepostingRetrieve");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RidePosting;
      return this.apiClient.callApi(
        '/api/rideposting/{order_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ridepostingUpdate operation.
     * @callback module:api/RidepostingApi~ridepostingUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RidePosting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} orderId A unique value identifying this ride posting.
     * @param {module:model/RidePosting} ridePosting 
     * @param {module:api/RidepostingApi~ridepostingUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RidePosting}
     */
    ridepostingUpdate(orderId, ridePosting, callback) {
      let postBody = ridePosting;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ridepostingUpdate");
      }
      // verify the required parameter 'ridePosting' is set
      if (ridePosting === undefined || ridePosting === null) {
        throw new Error("Missing the required parameter 'ridePosting' when calling ridepostingUpdate");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = RidePosting;
      return this.apiClient.callApi(
        '/api/rideposting/{order_id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
