/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchedProfile from '../model/PatchedProfile';
import Profile from '../model/Profile';

/**
* Profile service.
* @module api/ProfileApi
* @version 0.0.0
*/
export default class ProfileApi {

    /**
    * Constructs a new ProfileApi. 
    * @alias module:api/ProfileApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the profileCreate operation.
     * @callback module:api/ProfileApi~profileCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Profile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Profile} profile 
     * @param {module:api/ProfileApi~profileCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Profile}
     */
    profileCreate(profile, callback) {
      let postBody = profile;
      // verify the required parameter 'profile' is set
      if (profile === undefined || profile === null) {
        throw new Error("Missing the required parameter 'profile' when calling profileCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Profile;
      return this.apiClient.callApi(
        '/api/profile/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profileDestroy operation.
     * @callback module:api/ProfileApi~profileDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this profile.
     * @param {module:api/ProfileApi~profileDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    profileDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling profileDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/profile/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profileList operation.
     * @callback module:api/ProfileApi~profileListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Profile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ProfileApi~profileListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Profile>}
     */
    profileList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Profile];
      return this.apiClient.callApi(
        '/api/profile/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilePartialUpdate operation.
     * @callback module:api/ProfileApi~profilePartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Profile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this profile.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedProfile} opts.patchedProfile 
     * @param {module:api/ProfileApi~profilePartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Profile}
     */
    profilePartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedProfile'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling profilePartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Profile;
      return this.apiClient.callApi(
        '/api/profile/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profileRetrieve operation.
     * @callback module:api/ProfileApi~profileRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Profile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this profile.
     * @param {module:api/ProfileApi~profileRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Profile}
     */
    profileRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling profileRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Profile;
      return this.apiClient.callApi(
        '/api/profile/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profileUpdate operation.
     * @callback module:api/ProfileApi~profileUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Profile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this profile.
     * @param {module:model/Profile} profile 
     * @param {module:api/ProfileApi~profileUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Profile}
     */
    profileUpdate(id, profile, callback) {
      let postBody = profile;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling profileUpdate");
      }
      // verify the required parameter 'profile' is set
      if (profile === undefined || profile === null) {
        throw new Error("Missing the required parameter 'profile' when calling profileUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Profile;
      return this.apiClient.callApi(
        '/api/profile/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
